stages:
  - test-module
  - deploy-module
  - test-script
  - deploy-script

test-module:
  stage: test-module
  tags: [APP]
  rules:
    - changes:
        - Modules/**
  script: |
    $ScriptAnalyze = Invoke-ScriptAnalyzer -Path "$pwd\Modules" -Settings "$pwd\PSScriptAnalyzerSettings.psd1" -Recurse
    if ($ScriptAnalyze) {
      $ScriptAnalyze
      throw $($ScriptAnalyze | fl | out-string)
    }

deploy-module:
  stage: deploy-module
  tags: [APP]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - Modules/**
  script: |
    Get-PSRepository | ft Name,SourceLocation
    $ImportedModules = "$pwd\Modules" | Get-ChildItem -Directory | % {Get-ChildItem -Path $_.FullName -Filter '*.psd1'} | % {Import-Module $_.FullName -Prefix 'zzz' -DisableNameChecking -PassThru -Force}
    $PublishedModules = $ImportedModules | % {Find-Module -Repository $PSRepositoryName -Name $_.Name -ErrorAction SilentlyContinue} | % -Begin {$h=@{}} -Process {$h[$_.Name] = $_.Version} -End {$h}
    $diff = $ImportedModules | Select-Object -Property Name,Version,@{n='PublishedVersion';e={if($PublishedModules.ContainsKey($_.Name)){$PublishedModules[$_.Name]}else{[System.Version]::new()}}},ModuleBase
    $ShowDiff = $diff | Select-Object Name,Version,PublishedVersion | Format-Table -AutoSize | Out-String
    'diff modules'
    $ShowDiff
    $ToPublish = $diff | ? {$_.Version -gt $_.PublishedVersion}
    #if ($ToPublish) {$ToPublish | % {Publish-Module -Path $_.ModuleBase -NuGetApiKey $NuGetApiKey -Repository $PSRepositoryName}}
    if ($ToPublish) {
      $ToPublish | Select-Object -Property @(
        ,@{n='Script';e={$_.BaseName}}
        ,@{n='_Publish';e={$r=@{success=$true;error=''};try{$_ = Publish-Module -Path $_.ModuleBase -NuGetApiKey $NuGetApiKey -Repository $PSRepositoryName}catch{$r['success']=$false;$r['error']=$_.Exception.Message}finally{$r}}}
      ) | Select-Object -Property @(
        ,'Script'
        ,@{n='Published';e={$_._Publish.success}}
        ,@{n='Error';e={$_._Publish.error}}
      ) | fl
    }

test-script:
  stage: test-script
  tags: [APP]
  rules:
    - changes:
        - Scripts/**
  script: |
    $Warnings = Invoke-ScriptAnalyzer -Path "$pwd\Scripts" -Settings "$pwd\PSScriptAnalyzerSettings.psd1" -Recurse
    $Warnings = $ScriptAnalyze | ? {$_.Severity -gt 0}
    if ($Warnings) {
      $Warnings
      throw $($Warnings | fl | out-string)
    }

deploy-script:
  stage: deploy-script
  tags: [APP]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - Scripts/**
  script: |
    $Scripts = Get-ChildItem -Path "$pwd\Scripts\*.ps1"
    $Scripts | Select-Object -Property @(
      ,@{n='Script';e={$_.BaseName}}
      ,@{n='_Publish';e={$r=@{success=$true;error=''};try{$_ = Publish-Script -Path $_.FullName -NuGetApiKey $NuGetApiKey -Repository $PSRepositoryName}catch{$r['success']=$false;$r['error']=$_.Exception.Message}finally{$r}}}
    ) | Select-Object -Property @(
      ,'Script'
      ,@{n='Published';e={$_._Publish.success}}
      ,@{n='Error';e={$_._Publish.error}}
    ) | fl
